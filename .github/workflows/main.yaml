name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    # Запускаем тесты. Развертываем postgres
    # Инициализируем репозиторий
    # Устанавливаем Python
    # Устанавливаем зависимости
    # Для шага test экспортируем env vars
    # Запускаем тестирование
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt
      # Этот шаг дополним переменными для доступа к БД
      - name: Test with flake8 and django tests
        # Добавляем env-переменные для доступа к БД
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          # Сервер БД запущен в Docker, но его порт проброшен на хост
          # Поэтому подключаемся к 127.0.0.1:5432
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  build_and_push_to_docker_hub:
    # Инициализируем репозиторий
    # Устанавливаем докер
    # Логинимся в докер
    # Пушим в dockerhub
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
          # так можно получить доступ к secrets GithubActions secrets.NAME
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yaml не указывать версию
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_backend:latest
  frontend_tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        # Это готовый воркфлоу для установки Node.js на раннер
        uses: actions/setup-node@v3
        with:
          # Это параметр воркфлоу, указывающий нужную версию Node.js
          node-version: 18
      - name: Install dependencies
        # Эта команда устанавливает зависимости для фронтенда
        run: |
          cd frontend/
          npm ci
      - name: Test frontend
        # Запускаем тесты
        run: |
          cd frontend/
          npm run test
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          # Тут вместо username должен быть ваш логин на Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_gateway:latest
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      # Копируем docker-compose.production.yaml на сервер
      - name: Copy docker-compose.yaml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.YANDEX_PRAKTIKUM_MACHINE_ADDRESS }}
          username: ${{ secrets.YANDEX_PRAKTIKUM_MACHINE_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yaml"
          target: "taski"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.YANDEX_PRAKTIKUM_MACHINE_ADDRESS }}
          username: ${{ secrets.YANDEX_PRAKTIKUM_MACHINE_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd taski
            # Выполняет pull образов с Docker Hub
            sudo docker compose -f docker-compose.production.yaml pull
            # Перезапускает все контейнеры в Docker Compose
            sudo docker compose -f docker-compose.production.yaml down
            sudo docker compose -f docker-compose.production.yaml up -d
            # Выполняет миграции и сбор статики. 
            # На момент сборки образа нет контекста приложения, подключения к бд. Статика тоже могла измениться.
            sudo docker compose -f docker-compose.production.yaml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yaml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yaml exec backend cp -r /app/collected_static/. /backend_static/static/

# note: вместо этих migrate, collectstatic и cp можно было бы создаьб entrypoint.sh и запустить его прямо изнутри контейнера
#  FROM python:3.9-slim
#  # Установка зависимостей
#  WORKDIR /app
#  COPY . /app
#  RUN pip install -r requirements.txt
#  # Копирование скрипта entrypoint.sh
#  COPY entrypoint.sh /entrypoint.sh
#  RUN chmod +x /entrypoint.sh  # Делаем скрипт исполняемым
#  # Указываем скрипт как точку входа
#  ENTRYPOINT ["/entrypoint.sh"]

#!/bin/bash
#  set -e  # Если команда завершится с ошибкой — скрипт остановится
#
#  # Выполнение миграций базы данных
#  echo "Running database migrations..."
#  python manage.py migrate
#
#  # Сбор статических файлов
#  echo "Collecting static files..."
#  python manage.py collectstatic --noinput
#
#  # Запуск приложения (Django Development Server или Gunicorn)
#  echo "Starting Django application..."
#  exec gunicorn myproject.wsgi:application --bind 0.0.0.0:8000 --workers 3
